@page "/outdoor"

<div class="map">
    <!-- map is rendered row by row, top to bottom (TODO: Means y-axis points downwards. Standard? -->
    @for (int y = 0; y < positions.GetLength(1); y++)
    {
        <div id="row_@y" class="row">
        @for (int x = 0; x < positions.GetLength(0); x++)
        {
            string imgFileName = positions[x,y].ImageName + ".png";            
            <div id="@x,@y" class="cell">
                <div class="tile" style="background-image: url('img/uf_terrain/@imgFileName');" alt="@x,@y"> </div>
            </div>
        }
        </div>
    }
</div>

@functions {
  Tile[,] positions = CreateMap(20, 12);
  static String[] prefixes = new String[] { "ground" };
  static String[] middles = new String[] {
        "crusted",
        "dirt_brown",
        "dirt_dark",
        "grass",
        "grass_burnt",
        "sand"
        };

  // Create map
  private static Tile[,] CreateMap(int width, int height)
  {
      var poss = new Tile[width, height];
      Random random = new Random();

      for (int x = 0; x < width; x++)
      {
          for (int y = 0; y < height; y++){
              int prefixIndex = random.Next(0, prefixes.Length);
              String prefix = prefixes[prefixIndex];

              int middleIndex = random.Next(0, middles.Length);
              String middle = middles[middleIndex];

              int index = random.Next(1, 4);
              // TODO This is horrible, creating a new tileset for each x,y - but this is a throw-away demo, so not bothering to refactor
              var tileset = new Entities.TileSet("ground_" + middle, TileType.Ground, middle, new[] { 1, 2, 3, 4 }, null, ".", "green");
              poss[x,y] = new Tile (x, y, tileset, index);
          }
      }

      return poss;
  }
}
