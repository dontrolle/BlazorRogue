@page "/indoor"

@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime;
@inject IComponentContext ComponentContext

<div class="map" id="mapcontainer" onkeyup="@KeyUp">
    <!-- map is rendered row by row, top to bottom -->
    @for (int y = 0; y < map.Height; y++)
    {
        <div id="row_@y" class="row">
        @for (int x = 0; x < map.Width; x++)
        {
            string imgFileName = map.Tiles[x,y].ImageName + ".png";
            string tiletype = map.Tiles[x,y].TileType.ToString();
            string fovClass = map.IsVisibleMap[x,y] ? "" : "outoffov";
            string tileClass = $"tile {(fovClass)}";

            <div id="@x,@y" class="cell">
                @if (map.IsMappedMap[x,y]){
                    <div class="@tileClass" style="background-image: url('img/uf_terrain/@imgFileName')" alt="@x,@y (@tiletype)"> </div>

                    @foreach (var decoration in map.AllDecorations(x,y))
                    {
                        // skip invisibles outside of fov
                        if(decoration.GameObject.InvisibleOutsideFov && !map.IsVisibleMap[x,y]){
                            continue;
                        }

                        // determine css class
                        bool renderDiv = false;
                        string cssclass = "decoration";
                        string animationClass = "";
                        if(decoration.AnimationClass != null && decoration.AnimationClass != ""){
                            animationClass = @decoration.AnimationClass;
                            renderDiv = true;
                        }

                        // - handle layer class
                        var layerClass = "decbehind";
                        if(decoration.InFront){
                            layerClass = "decinfront";
                        }

                        cssclass = $"{cssclass} {(animationClass)} {(layerClass)} {(fovClass)}";
                        
                        // determine css style
                        string style = "";
                        if(decoration.ImageName != null && decoration.ImageName != ""){
                            string decImgFileName = decoration.ImageName + ".png";

                            renderDiv = true;
                            style = $"background-image: url('img/uf_terrain/{decImgFileName}');";
                        }

                        // - handle horizontal and vertical offset
                        string offset = "";
                        if (decoration.Offset != 0)
                        {
                            offset = $"top: {decoration.Offset}px;";
                        }
                        if (decoration.HOffset != 0)
                        {
                            offset += $"left: {decoration.HOffset}px;";
                        }

                        style = $"{style}{offset}";

                        if(renderDiv)
                        {
                            <div class="@cssclass" style="@style" alt="@x,@y (Blocking=@decoration.GameObject.Blocking)"> </div>
                        }

                        if (decoration.OnClick != null){
                            <button class="interact_button" onclick=@(() => OnClick(decoration)) /> 
                        }
                    }
                }
            </div>
        }
        </div>
    }

    <div id="start_button_div" class="red-square" style="background-image: url('img/uf_interface_641.png');">
        <!-- Ugly start button for now; it's a placeholder for something we need to change. -->    
        <button id="start_button" class="interact_button" onclick=@(OnClickStart)/> 
    </div>
</div>

<div id="debuginfo">
    <ul>
    @foreach (var debugInfo in map.DebugInfo)
    {
        <li>@debugInfo</li>
    }
    </ul>
</div>

<audio id="bgsound" autoplay loop>
  <source src="sound/Ambience_Cave_00.mp3" type="audio/mpeg">
</audio>

@functions {
    Map map = CreateMap(30,22);

    async Task Focus(string controlId)
    {
        await JsRuntime.InvokeAsync<string>("blazorroguefuncs.setFocus", controlId);
    }

    protected override async Task OnAfterRenderAsync()
    {
        // TODO: Sadly doesn't work        
        if (!ComponentContext.IsConnected)
        {
            return;
        }

        Map.SoundManager = new SoundManager(JsRuntime);

        await Focus("start_button");
    }

    // Create map
    private static Map CreateMap(int width, int height)
    {
        var dg = new DungeonGenerator(width, height);
        dg.Generate();
        dg.Map.RenderGameObjects();
        dg.Map.RenderMoveables();
        return dg.Map;
    }

    private void OnClickStart(){
        // TODO: Sadly doesn't work
//        await JsRuntime.InvokeAsync<string>("HideById", "start_button_div");
//        this.StateHasChanged();
    }
    
    private void OnClick(Decoration decoration)
    {
        decoration.OnClick();
        // NOTE: Rerender only gameobject? or rerender every decoration in tile...? Going for the latter, right now...
        //       When I begin to do effecs, I may need to revisit this...
        map.UpdateBlocksLight(decoration.GameObject.x, decoration.GameObject.y, recomputeVisibility: true);
        map.UpdateBlockMovement(decoration.GameObject.x, decoration.GameObject.y);
        map.RenderGameObjects(decoration.GameObject.x, decoration.GameObject.y);
    }

    void KeyUp(UIKeyboardEventArgs e)
    {
        map.OnKeyPress(e.Code);
        map.RenderMoveables();
        map.PlayerTookTurn();
//        this.StateHasChanged();
    }
}